// Generated by CoffeeScript 1.6.3
(function() {
  var BrowserDetect, Connection, GUI, GUI_OIIO, addTab, add_alert, closeTab, exports, getParentTextOnly, getType, get_appropriate_ws_url, lib, loadLibrary, makeNewName, onTabKey, pos, removeFromArray, removeLastChunk, setupLibraryEditor, setupSocket, socket, transferTab,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  exports = new Object();

  exports.oiios = new Array();

  exports.currentConnection = null;

  exports.connectorID = 0;

  exports.alertContainerJ = null;

  exports.nAlerts = 0;

  exports.oiioNames = new Object();

  exports.templates = null;

  exports.tabHeader = null;

  exports.tabCounter = 2;

  exports.tabs = null;

  socket = null;

  $(document).ready(function() {
    "use strict";
    exports.alertContainerJ = $("#alerts");
    exports.templates = $("#templates");
    exports.tabHeader = exports.templates.find("#tab-header > li");
    exports.tabCounter = 2;
    exports.tabs = $(".tabs").tabs();
    exports.tabs.delegate("span.ui-icon-close", "click", closeTab);
    exports.tabs.bind("keyup", onTabKey);
    $("#file-manager li").click(function(ev) {
      return addTab($(ev.target).attr("data-type"));
    });
    return exports.tabs.find(".ui-tabs-nav").sortable({
      connectWith: '.ui-tabs-nav',
      receive: transferTab
    });
  });

  addTab = function(type) {
    var id, label, li, tabContentHtml, tabs1;
    tabContentHtml = exports.templates.find("[data-type='" + type + "']").clone();
    label = makeNewName($(".tabs > ul.ui-droppable-tab"), type);
    id = "tab-" + exports.tabCounter;
    tabContentHtml.attr("id", id);
    li = exports.tabHeader.clone();
    li.find("a").attr("data-name", label).text(label).attr("href", "#" + id);
    tabs1 = exports.tabs.filter(".group-1");
    tabs1.find(".ui-tabs-nav").append(li);
    tabs1.append(tabContentHtml);
    tabs1.tabs("refresh");
    return exports.tabCounter++;
  };

  transferTab = function(event, ui) {
    var panelId, receiver, sender, tab, tabJ;
    receiver = $(this).parent();
    sender = $(ui.sender[0]).parent();
    tab = ui.item[0];
    tabJ = $(ui.item[0]);
    panelId = tabJ.attr("aria-controls");
    tabJ = $(tabJ.removeAttr($.makeArray(tab.attributes).map(function(item) {
      return item.name;
    }).join(' ')).remove());
    tabJ.find('a').removeAttr('id tabindex role class');
    $(this).append(tabJ);
    $($("#" + panelId).remove()).appendTo(receiver);
    return exports.tabs.tabs('refresh');
  };

  closeTab = function() {
    var panelId;
    panelId = $(this).closest("li").remove().attr("aria-controls");
    $("#" + panelId).remove();
    return exports.tabs.tabs("refresh");
  };

  onTabKey = function(event) {
    if (event.altKey && event.keyCode === $.ui.keyCode.BACKSPACE) {
      return closeTab();
    }
  };

  Connection = (function() {
    function Connection(OIIOin, OIIOout, startConnectorJ, endConnectorJ) {
      this.OIIOin = OIIOin;
      this.OIIOout = OIIOout;
      this.startConnectorJ = startConnectorJ;
      this.endConnectorJ = endConnectorJ;
      this.path = null;
      this.createPath();
    }

    Connection.prototype.createPath = function() {
      if (this.path !== null) {
        return;
      }
      this.path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      this.path.setAttributeNS(null, "fill", "none");
      this.path.setAttributeNS(null, "stroke", "black");
      this.update();
      return document.getElementById("svg-connections").appendChild(this.path);
    };

    Connection.prototype.finish = function(startConnectorJ, endConnectorJ, newOIIOin, newOIIOout) {
      this.startConnectorJ = startConnectorJ;
      this.endConnectorJ = endConnectorJ;
      if (this.OIIOout === null) {
        this.OIIOout = newOIIOout;
      } else if (this.OIIOin === null) {
        this.OIIOin = newOIIOin;
      }
      if (this.OIIOin.outputConnections[this.startConnectorJ.attr("id")] == null) {
        this.OIIOin.outputConnections[this.startConnectorJ.attr("id")] = new Array();
      }
      if (this.OIIOout.inputConnections[this.endConnectorJ.attr("id")] != null) {
        this.OIIOout.inputConnections[this.endConnectorJ.attr("id")].remove();
      }
      this.OIIOin.outputConnections[this.startConnectorJ.attr("id")].push(this);
      this.OIIOout.inputConnections[this.endConnectorJ.attr("id")] = this;
      this.startConnectorJ.addClass("connected");
      this.endConnectorJ.addClass("connected");
      this.createPath();
      this.update();
      return sendConnections();
    };

    Connection.prototype.update = function(uiPosition) {
      var endPos, startPos;
      startPos = new Object();
      endPos = new Object();
      if (this.startConnectorJ != null) {
        startPos.top = this.startConnectorJ.offset().top + this.startConnectorJ.height() * 0.5;
        startPos.left = this.startConnectorJ.offset().left + this.startConnectorJ.width();
      } else {
        startPos = uiPosition;
      }
      if (this.endConnectorJ != null) {
        endPos.top = this.endConnectorJ.offset().top + this.endConnectorJ.height() * 0.5;
        endPos.left = this.endConnectorJ.offset().left;
      } else {
        endPos = uiPosition;
      }
      return this.updatePath(startPos, endPos);
    };

    Connection.prototype.updatePath = function(startPos, endPos) {
      var end2X, endX, endY, midX, midY, offset, offsetX, start2X, startX, startY;
      if (startPos == null) {
        startPos = endPos;
      }
      if (endPos == null) {
        endPos = startPos;
      }
      offset = $("#svg-connections").offset();
      startX = startPos.left - offset.left;
      startY = startPos.top - offset.top;
      endX = endPos.left - offset.left;
      endY = endPos.top - offset.top;
      midX = startX + (endX - startX) / 2;
      if (endX > startX) {
        return this.path.setAttributeNS(null, "d", 'M' + startX + ',' + startY + 'C' + midX + ',' + startY + ',' + midX + ',' + endY + ',' + endX + ',' + endY + '');
      } else {
        offsetX = 0.5 * Math.abs(endY - startY);
        midY = startY + (endY - startY) / 2;
        start2X = startX + offsetX;
        end2X = endX - offsetX;
        return this.path.setAttributeNS(null, "d", 'M' + startX + ',' + startY + 'C' + start2X + ',' + startY + ',' + start2X + ',' + midY + ',' + startX + ',' + midY + 'L' + endX + ',' + midY + 'C' + end2X + ',' + midY + ',' + end2X + ',' + endY + ',' + endX + ',' + endY);
      }
    };

    Connection.prototype.removeIfUnfinished = function() {
      if (this.OIIOin === null || this.OIIOout === null) {
        this.remove();
        return exports.currentConnection = null;
      }
    };

    Connection.prototype.remove = function() {
      if (this.OIIOin !== null && (this.OIIOin.outputConnections[this.startConnectorJ.attr("id")] != null)) {
        removeFromArray(this, this.OIIOin.outputConnections[this.startConnectorJ.attr("id")]);
      }
      if (this.OIIOout !== null && this.OIIOout.inputConnections[this.endConnectorJ.attr("id")] === this) {
        this.OIIOout.inputConnections[this.endConnectorJ.attr("id")] = null;
      }
      $(this.path).remove();
      sendConnections();
      this.path = null;
      this.OIIOin = null;
      return this.OIIOout = null;
    };

    return Connection;

  })();

  GUI_OIIO = (function() {
    function GUI_OIIO(oiioDesc, oiioContainerJ, name, uiOffset) {
      var connector, connectorContainerJ, connectorType, connectors, connectorsJ, connectorsName, isExtandable, left, top, _i, _len;
      this.name = name;
      this.updateConnections = __bind(this.updateConnections, this);
      this.dropConnection = __bind(this.dropConnection, this);
      this.stopConnection = __bind(this.stopConnection, this);
      this.updateConnection = __bind(this.updateConnection, this);
      this.startConnection = __bind(this.startConnection, this);
      this.deleteConnector = __bind(this.deleteConnector, this);
      this.addConnector = __bind(this.addConnector, this);
      this.inputConnections = new Object();
      this.outputConnections = new Object();
      this.oiioJ = $("<div class=\"oiio ui-draggable clearfix\">\n	<div class=\"head\"> " + this.name + "</div>\n</div>");
      connectorContainerJ = $('<div class="connectors"></div>');
      for (connectorsName in oiioDesc) {
        connectors = oiioDesc[connectorsName];
        connectorsJ = $('<ul class="' + connectorsName + '"></ul>');
        connectorType = connectorsName.replace("extendable_", "");
        connectorsJ.addClass(connectorType);
        isExtandable = connectorsName.indexOf("extendable") >= 0;
        for (_i = 0, _len = connectors.length; _i < _len; _i++) {
          connector = connectors[_i];
          this.createConnector(connector, isExtandable, connectorType, connectorsJ);
        }
        if (isExtandable) {
          connectorsJ.append('<button class="btn add">+</button>');
        }
        connectorContainerJ.append(connectorsJ);
      }
      this.oiioJ.append(connectorContainerJ);
      top = uiOffset.top;
      left = uiOffset.left;
      this.oiioJ.draggable({
        drag: this.updateConnections,
        stop: this.updateConnections
      });
      this.oiioJ.find("button.add").click(this.addConnector);
      oiioContainerJ.append(this.oiioJ);
      this.oiioJ.offset({
        top: top,
        left: left
      });
    }

    GUI_OIIO.prototype.createConnector = function(connector, isExtandable, connectorType, connectorsJ) {
      var connectorJ, deleteBtnJ;
      connectorJ = $('<li class="ui-draggable ui-droppable"></li>');
      connectorJ.attr("data-value", connector["default"]);
      connectorJ.attr("data-type", connector.type);
      connectorJ.attr("id", "connector_" + exports.connectorID);
      exports.connectorID++;
      connector.name = makeNewName(connectorsJ, connector.name);
      connectorJ.text(connector.name);
      connectorJ.attr("data-name", connector.name);
      if (isExtandable) {
        deleteBtnJ = $('<button type="button" class="close">&times;</button>');
        if (connectorType === "inputs") {
          connectorJ.append(deleteBtnJ);
        } else if (connectorType === "outputs") {
          connectorJ.prepend(deleteBtnJ);
        }
        deleteBtnJ.click(this.deleteConnector);
      }
      if (connectorsJ.children().last().is("button")) {
        connectorJ.insertBefore(connectorsJ.children().last());
      } else {
        connectorsJ.append(connectorJ);
      }
      connectorJ.draggable({
        helper: "clone",
        start: this.startConnection,
        drag: this.updateConnection,
        stop: this.stopConnection
      }).droppable({
        drop: this.dropConnection,
        tolerance: "pointer"
      });
      return connectorJ;
    };

    GUI_OIIO.prototype.addConnector = function(ev) {
      var btnJ, connector, connectorJ, connectorType, connectorsJ, height, isExtandable, prevConnectorJ;
      connector = new Object();
      btnJ = $(ev.target);
      prevConnectorJ = btnJ.prev();
      connectorsJ = btnJ.parent();
      connector["default"] = prevConnectorJ.attr("data-value");
      connector.type = prevConnectorJ.attr("data-type");
      connector.name = removeLastChunk(prevConnectorJ.attr("data-name"));
      isExtandable = connectorsJ.hasClass("extendable_outputs") || connectorsJ.hasClass("extendable_inputs");
      connectorType = connectorsJ.hasClass("outputs") ? "outputs" : "inputs";
      connectorJ = this.createConnector(connector, isExtandable, connectorType, connectorsJ);
      height = connectorJ.outerHeight();
      this.oiioJ.nextAll().offset(function(index, currentOffset) {
        return {
          top: currentOffset.top - height,
          left: currentOffset.left
        };
      });
      return this.updateConnections();
    };

    GUI_OIIO.prototype.deleteConnector = function(ev) {
      var btnJ, connectorJ, connectorsJ, height;
      btnJ = $(ev.target);
      connectorJ = btnJ.parent();
      connectorsJ = connectorJ.parent();
      if (connectorsJ.find("li").size() <= 1) {
        return;
      }
      if (connectorsJ.hasClass("outputs") && (this.outputConnections[connectorJ.attr("id")] != null)) {
        this.outputConnections[connectorJ.attr("id")].remove();
      } else if (connectorsJ.hasClass("inputs") && (this.inputConnections[connectorJ.attr("id")] != null)) {
        this.inputConnections[connectorJ.attr("id")].remove();
      }
      height = connectorJ.outerHeight();
      connectorJ.remove();
      this.oiioJ.nextAll().offset(function(index, currentOffset) {
        return {
          top: currentOffset.top + height,
          left: currentOffset.left
        };
      });
      return this.updateConnections();
    };

    GUI_OIIO.prototype.startConnection = function(ev, ui) {
      if ($(ev.target).parent().hasClass("outputs")) {
        return exports.currentConnection = new Connection(this, null, $(ev.target), null);
      } else if ($(ev.target).parent().hasClass("inputs")) {
        return exports.currentConnection = new Connection(null, this, null, $(ev.target));
      }
    };

    GUI_OIIO.prototype.updateConnection = function(ev, ui) {
      return exports.currentConnection.update(ui.offset);
    };

    GUI_OIIO.prototype.stopConnection = function(ev, ui) {
      var _ref;
      return (_ref = exports.currentConnection) != null ? _ref.removeIfUnfinished() : void 0;
    };

    GUI_OIIO.prototype.dropConnection = function(ev, ui) {
      if ($(ev.target).parent().hasClass("inputs") && (exports.currentConnection.OIIOin != null)) {
        exports.currentConnection.finish(ui.draggable, $(ev.target), null, this);
      } else if ($(ev.target).parent().hasClass("outputs") && (exports.currentConnection.OIIOout != null)) {
        exports.currentConnection.finish($(ev.target), ui.draggable, this, null);
      } else {
        exports.currentConnection.remove();
      }
      return exports.currentConnection = null;
    };

    GUI_OIIO.prototype.updateConnections = function(ev, ui) {
      var connection, connections, connectorName, _ref, _ref1, _results;
      _ref = this.inputConnections;
      for (connectorName in _ref) {
        connection = _ref[connectorName];
        if (connection != null) {
          connection.update();
        }
      }
      _ref1 = this.outputConnections;
      _results = [];
      for (connectorName in _ref1) {
        connections = _ref1[connectorName];
        _results.push((function() {
          var _i, _len, _results1;
          _results1 = [];
          for (_i = 0, _len = connections.length; _i < _len; _i++) {
            connection = connections[_i];
            _results1.push(connection != null ? connection.update() : void 0);
          }
          return _results1;
        })());
      }
      return _results;
    };

    return GUI_OIIO;

  })();

  GUI = (function() {
    var dropOIIO, makeUniqueName, sendConnections;

    function GUI() {
      var oiioSymbols, saveBtnJ, toolbarJ;
      oiioSymbols = jsyaml.load(lib);
      loadLibrary($("#library > ul.oiio-list"), oiioSymbols);
      setupLibraryEditor();
      $(".ui-draggable").draggable({
        helper: "clone"
      });
      $(".ui-droppable").droppable({
        drop: this.dropOIIO
      });
      toolbarJ = $("#toolbar");
      exports.alertContainerJ = toolbarJ;
      saveBtnJ = toolbarJ.find("#save-btn");
      saveBtnJ.click(this.sendConnections);
    }

    sendConnections = function() {
      var connection, i, inputName, oiio, oiioConnections, output, outputName, outputs, _i, _j, _len, _len1, _ref, _ref1;
      oiioConnections = new Object();
      _ref = exports.oiios;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        oiio = _ref[_i];
        oiioConnections[oiio.name] = new Object();
        _ref1 = oiio.outputConnections;
        for (outputName in _ref1) {
          outputs = _ref1[outputName];
          inputName = "";
          for (i = _j = 0, _len1 = outputs.length; _j < _len1; i = ++_j) {
            output = outputs[i];
            if (i === 0) {
              inputName = output.startConnectorJ.attr("data-name");
              oiioConnections[oiio.name][inputName] = new Array();
            }
            connection = new Object();
            connection.inIndex = output.startConnectorJ.index();
            connection.outIndex = output.endConnectorJ.index();
            connection.oiio = output.OIIOout.name;
            connection.name = output.endConnectorJ.attr("data-name");
            connection.type = output.startConnectorJ.attr("data-type");
            oiioConnections[oiio.name][inputName].push(connection);
          }
        }
      }
      return socket.send(JSON.stringify(oiioConnections));
    };

    makeUniqueName = function(oiioName) {
      if (exports.oiioNames.hasOwnProperty(oiioName)) {
        exports.oiioNames[oiioName]++;
      } else {
        exports.oiioNames[oiioName] = 0;
      }
      return oiioName + "_" + exports.oiioNames[oiioName];
    };

    dropOIIO = function(ev, ui) {
      var name, oiioContainerJ, oiioSymbolJ;
      if (!ui.draggable.hasClass("oiio-symbol")) {
        return;
      }
      oiioSymbolJ = ui.draggable;
      oiioContainerJ = $(ev.target);
      name = this.makeUniqueName(oiioSymbolJ.text());
      return exports.oiios.push(new GUI_OIIO(oiioSymbols.oiios[oiioSymbolJ.html()], oiioContainerJ, name, ui.offset));
    };

    return GUI;

  })();

  loadLibrary = function(libraryJ, oiioSymbols) {
    var itemJ, oiio, oiioName, _ref, _results;
    _ref = oiioSymbols.oiios;
    _results = [];
    for (oiioName in _ref) {
      oiio = _ref[oiioName];
      itemJ = $('<li  class="oiio-symbol ui-draggable"></li>');
      itemJ.html(oiioName);
      _results.push(libraryJ.append(itemJ));
    }
    return _results;
  };

  setupLibraryEditor = function() {
    var libraryEditor;
    libraryEditor = ace.edit("library-editor");
    libraryEditor.setValue(lib);
    libraryEditor.setTheme("ace/theme/monokai");
    libraryEditor.getSession().setMode("ace/mode/yaml");
    return document.getElementById('library-editor').style.fontSize = '14px';
  };

  lib = "oiios:\n\n    Osc:              # the user can add OSC addresses to listen: thanks to oscOutList, manually type addresses\n        extendable_outputs:\n            - { name: drum1, type: oscOut, default: drum/1/i }\n            - { name: drum2, type: oscOut, default: drum/2/i }\n            - { name: drum3, type: oscOut, default: drum/3/i }\n\n    Drums:            # the user can not add OSC addresses to listen: those are set by default\n        outputs:\n            - { name: drum1, type: oscOut, default: drum/1/i }\n            - { name: drum2, type: oscOut, default: drum/2/i }\n            - { name: drum3, type: oscOut, default: drum/3/i }\n            - { name: drum4, type: oscOut, default: drum/4/i }\n\n    Keyboard:           # the user can add keys: keyList\n        extendable_outputs:\n            - { name: y, type: key }\n            - { name: ctrl, type: key }\n            - { name: space, type: key }\n\n    KeyboardExample:    # the user can not add keys: static\n        outputs:\n            - { name: a, type: key }\n            - { name: z, type: key }\n            - { name: e, type: key }\n            - { name: r, type: key }\n            - { name: t, type: key }\n            - { name: y, type: key }\n            - { name: ctrl, type: key }\n            - { name: space, type: key }\n            - { name: click-right, type: mouse }\n            - { name: arrow-up, type: key }\n            - { name: arrow-down, type: key }\n\n    VideoPlayer:        # the user can add video path: enter video path with dialog window\n        extendable_inputs:\n            - { name: video1, type: path, default: /home/user/video1.avi }\n            - { name: video2, type: path, default: /home/user/video2.avi }\n            - { name: video3, type: path, default: /home/user/video3.avi }\n\n    VideoPlayerExample:     # the user can not add video path: those are set by default\n        inputs:\n            - { name: video1, type: path, default: /home/user/video1.avi }\n            - { name: video2, type: path, default: /home/user/video2.avi }\n            - { name: video3, type: path, default: /home/user/video3.avi }\n            - { name: video4, type: path, default: /home/user/video4.avi }\n        outputs:\n            - { name: video, type: video }";

  add_alert = function(message, type, delay, container) {
    var alert;
    if (type == null) {
      type = "";
    }
    if (delay == null) {
      delay = 2000;
    }
    if (container == null) {
      container = null;
    }
    if (type !== "") {
      type = " alert-" + type;
    }
    alert = $("<div class=\"" + type + " alert fade in\" data-brain-id=\"" + exports.nAlerts + "\">\n		<button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n		<p>" + message + "</p>\n</div>");
    exports.nAlerts++;
    if (container != null) {
      container.after(alert);
    } else {
      exports.alertContainerJ.append(alert);
    }
    if (delay !== 0) {
      alert.delay(delay).fadeOut(2500, function() {
        return $(this).remove();
      });
    }
    return exports.nAlerts - 1;
  };

  removeFromArray = function(element, array) {
    var index;
    index = array.indexOf(element);
    if (index > -1) {
      return array.splice(index, 1);
    }
  };

  getType = function(obj) {
    return Object.prototype.toString.call(obj);
  };

  getParentTextOnly = function(objJ) {
    return objJ.clone().children().remove().end().text();
  };

  removeLastChunk = function(string) {
    var uIdx;
    uIdx = string.lastIndexOf("_");
    if (uIdx < 0) {
      return string;
    } else {
      return string.slice(0, uIdx);
    }
  };

  makeNewName = function(parentJ, name, separator) {
    var n;
    if (separator == null) {
      separator = "_";
    }
    if (parentJ.find("[data-name='" + name + "']").size() > 0) {
      n = 1;
      while (parentJ.find("[data-name='" + name + separator + n + "']").size() > 0) {
        n++;
      }
      return name + separator + n;
    } else {
      return name;
    }
  };

  setupSocket = function() {
    var exception;
    if (BrowserDetect.browser === "Firefox") {
      socket = new MozWebSocket(get_appropriate_ws_url());
    } else {
      socket = new WebSocket(get_appropriate_ws_url());
    }
    try {
      socket.onopen = function() {
        return add_alert("websocket connection opened!", "success");
      };
      socket.onmessage = function(msg) {
        return add_alert("message recieved: " + msg.data);
      };
      return socket.onclose = function() {
        return add_alert("websocket connection closed.", "warning");
      };
    } catch (_error) {
      exception = _error;
      return add_alert("Error: " + exception, "error", 0);
    }
  };

  get_appropriate_ws_url = function() {
    var pcol, u;
    pcol = void 0;
    u = document.URL;
    if (u.substring(0, 5) === "https") {
      pcol = "wss://";
      u = u.substr(8);
    } else {
      pcol = "ws://";
      if (u.substring(0, 4) === "http") {
        u = u.substr(7);
      }
    }
    u = u.split("/");
    return pcol + u[0];
  };

  BrowserDetect = {
    init: function() {
      this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
      this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
      return this.OS = this.searchString(this.dataOS) || "an unknown OS";
    },
    searchString: function(data) {
      var dataProp, dataString, i;
      i = 0;
      while (i < data.length) {
        dataString = data[i].string;
        dataProp = data[i].prop;
        this.versionSearchString = data[i].versionSearch || data[i].identity;
        if (dataString) {
          if (dataString.indexOf(data[i].subString) !== -1) {
            return data[i].identity;
          }
        } else {
          if (dataProp) {
            return data[i].identity;
          }
        }
        i++;
      }
    },
    searchVersion: function(dataString) {
      var index;
      index = dataString.indexOf(this.versionSearchString);
      if (index === -1) {
        return;
      }
      return parseFloat(dataString.substring(index + this.versionSearchString.length + 1));
    },
    dataBrowser: [
      {
        string: navigator.userAgent,
        subString: "Chrome",
        identity: "Chrome"
      }, {
        string: navigator.userAgent,
        subString: "OmniWeb",
        versionSearch: "OmniWeb/",
        identity: "OmniWeb"
      }, {
        string: navigator.vendor,
        subString: "Apple",
        identity: "Safari",
        versionSearch: "Version"
      }, {
        prop: window.opera,
        identity: "Opera",
        versionSearch: "Version"
      }, {
        string: navigator.vendor,
        subString: "iCab",
        identity: "iCab"
      }, {
        string: navigator.vendor,
        subString: "KDE",
        identity: "Konqueror"
      }, {
        string: navigator.userAgent,
        subString: "Firefox",
        identity: "Firefox"
      }, {
        string: navigator.vendor,
        subString: "Camino",
        identity: "Camino"
      }, {
        string: navigator.userAgent,
        subString: "Netscape",
        identity: "Netscape"
      }, {
        string: navigator.userAgent,
        subString: "MSIE",
        identity: "Explorer",
        versionSearch: "MSIE"
      }, {
        string: navigator.userAgent,
        subString: "Gecko",
        identity: "Mozilla",
        versionSearch: "rv"
      }, {
        string: navigator.userAgent,
        subString: "Mozilla",
        identity: "Netscape",
        versionSearch: "Mozilla"
      }
    ],
    dataOS: [
      {
        string: navigator.platform,
        subString: "Win",
        identity: "Windows"
      }, {
        string: navigator.platform,
        subString: "Mac",
        identity: "Mac"
      }, {
        string: navigator.userAgent,
        subString: "iPhone",
        identity: "iPhone/iPod"
      }, {
        string: navigator.platform,
        subString: "Linux",
        identity: "Linux"
      }
    ]
  };

  BrowserDetect.init();

  pos = 0;

}).call(this);
